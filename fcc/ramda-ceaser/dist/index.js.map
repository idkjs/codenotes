{"version":3,"sources":["../index.js"],"names":["R","require","input","Box","map","f","x","inspect","nextCharForNumberString","str","parseInt","s","i","String","fromCharCode","result","console","log","rot13","split","rotResult"],"mappings":";;AAAA,IAAMA,IAAIC,QAAQ,OAAR,CAAV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAMC,QAAQ,gBAAd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,IAAMC,MAAM,SAANA,GAAM;AAAA,WACP;AACGC,aAAK;AAAA,mBAAKD,IAAIE,EAAEC,CAAF,CAAJ,CAAL;AAAA,SADR;AAEGC,iBAAS;AAAA,4BAAaD,CAAb;AAAA;AAFZ,KADO;AAAA,CAAZ;;AAMA,IAAME,0BAA0B,SAA1BA,uBAA0B;AAAA,WAC5BL,IAAIM,GAAJ;AACA;AADA,KAECL,GAFD,CAEK;AAAA,eAAKM,SAASC,CAAT,CAAL;AAAA,KAFL,EAGCP,GAHD,CAGK;AAAA,eAAKQ,IAAI,CAAT;AAAA,KAHL,EAICR,GAJD,CAIK;AAAA,eAAKS,OAAOC,YAAP,CAAoBF,CAApB,CAAL;AAAA,KAJL,CAD4B;AAAA,CAAhC;;AAOA,IAAMG,SAASP,wBAAwB,KAAxB,CAAf;AACAQ,QAAQC,GAAR,CAAYF,MAAZ;;AAEA,IAAMG,QAAQ,SAARA,KAAQ;AAAA,WACd,CAACT,GAAD,EACCU,KADD,CACO,EADP,CADc;AAAA,CAAd;AAGA;AACA;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACAC,YAAWF,MAAMhB,KAAN,CAAX;AACAc,QAAQC,GAAR,CACEG,SADF","file":"index.js","sourcesContent":["const R = require('ramda')\n\n//WORKS!\n// function rot13(str) { // LBH QVQ VG!\n//     str = str.split('')\n//     const shift = 13\n//     str = str.map(function(i){\n//         c = i.charCodeAt(0)\n//         if(c < 65 || c > 90) {\n//             return String.fromCharCode(c)\n//         } else if (c < 78) {\n//             return String.fromCharCode(c + shift)\n//         }\n//         return String.fromCharCode(c - shift)\n//   }).join('')\n//   return str;\n// }\n\n// identity()/ string in a box version\nconst input = \"SERR PBQR PNZC\"\n\n// const log = R.tap(console.log)\n// const rot14 = str => [str] // [ 'SERR PBQR PNZC' ]\n// const rot14 = str => [str] // [ 'S', 'E', 'R', 'R', ' ', 'P', 'B', 'Q', 'R', ' ', 'P', 'N', 'Z', 'C' ]\n//     [str].split('')\n// rot14.map(s => console.log(s))\n// console.log(rot14[0]) // undefined\n// .every(function(item, index, arr) {\n//     console.log(this); //window\n// }, input);\n// function splitString(stringToSplit, separator) {\n//     var arrayOfStrings = stringToSplit.split(separator);\n\n//     console.log('The original string is: \"' + stringToSplit + '\"');\n//     console.log('The separator is: \"' + separator + '\"');\n//     console.log('The array has ' + arrayOfStrings.length + ' elements: ' + arrayOfStrings.join(' / '));\n// }\n// splitString(input, '')\n// const result14 = rot14(input)\n// console.log(rot14[0])\n// console.log(result14)\n//\n// function rot13(str) { // LBH QVQ VG!\n//     str = str.split('');\n//     const shift = 13\n//     str = str.map(function(i) {\n//         // charAt is using slice under the hood so have to put it back together with second index\n//         //   of sliced word.\n//         return String.fromCharCode(i.charCodeAt(0) - shift);\n//     }).join('');\n//     return str;\n// }\n\n// Change the inputs below to test\n// console.log(\n//         rot13(input), rot14(input), input\n//     )\n\n// Egghead Frisby <https://egghead.io/lessons/javascript-linear-data-flow-with-container-style-types-box>\n// const nextStringNumberFromChar = str => {\n//         const trimmed = str.trim()\n//         const number = parseInt(trimmed)\n//         const nextNumber = number + 1\n//         return String.fromCharCode(nextNumber)\n//     }\n// orginal\n// const nextCharForNumberString = str => {\n//     const trimmed = str.trim()\n//     const number = parseInt(trimmed)\n//     const nextNumber = number + 1\n//     return String.fromCharCode(nextNumber)\n// }\n\n// first refactor\n\n// const nextCharForNumberString = str =>\n//     String.fromCharCode(parseInt(str.trim()) + 1)\n\n// second refactor with maps. 'String in a Box'\n\n// const nextCharForNumberString = str => [str]\n//     .map(s => s.trim())\n//     .map(s => parseInt(s))\n//     .map(i => i + 1)\n//     .map(i => String.fromCharCode(i))\n\n// 3rd refactor\n\n\nconst Box = x =>\n    ({\n        map: f => Box(f(x)),\n        inspect: () => `Box(${x})`\n    })\n\nconst nextCharForNumberString = str =>\n    Box(str)\n    // .map(s => s.trim())\n    .map(s => parseInt(s))\n    .map(i => i + 1)\n    .map(i => String.fromCharCode(i))\n\nconst result = nextCharForNumberString(' 64')\nconsole.log(result)\n\nconst rot13 = str =>\n[str]\n.split('')\n// WORKS!\n// function rot13(str) { // LBH QVQ VG!\n//   str = str.split('')\n//   // str.map(c => String.charCodeAt(c))\n//   str.map(i => console.log(i))\n  // const shift = 13\n  // str = str.map(function(i){\n  //   c = i.charCodeAt(0)\n  //   if(c < 65 || c > 90) {\n  //     return nextCharForNumberString(c)\n  //   } else if (c < 78) {\n  //     return nextCharForNumberString(c + shift)\n  //   }\n  //   return nextCharForNumberString(c - shift)\n  // }).join('')\n  // return str;\n// }\nrotResult =rot13(input)\nconsole.log(\n  rotResult\n\n);"]}